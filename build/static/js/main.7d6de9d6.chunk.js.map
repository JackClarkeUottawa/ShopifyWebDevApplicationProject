{"version":3,"sources":["Components/SearchBar.js","Components/SearchResults.js","Components/NominationsList.js","Func/OMDB.js","App.js","serviceWorker.js","index.js"],"names":["LoadingButton","props","useState","isLoading","setLoading","useEffect","onSearchSubmitted","value","then","Button","variant","disabled","onClick","SearchBar","Form","Row","Col","sm","Control","type","placeholder","onChange","e","className","SearchResults","movieError","results","map","movie","Title","Year","NominationsList","React","Component","Omdb","key","this","searchText","fetch","App","database","OMDB","movieSearch","movieSearchResults","imdbID","Type","Poster","movieNominees","movieNotFoundError","state","setState","Container","align","Card","Body","searchPromise","search","searchObject","errorResult","Search","data","Promise","resolve","reject","setTimeout","status","json","actualStuff","newState","Response","movieNotFound","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d6de9d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction LoadingButton(props) {\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) {\n      props.onSearchSubmitted(props.value).then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button\n      variant=\"primary\"\n      disabled={isLoading}\n      onClick={!isLoading ? handleClick : null}\n    >\n      {isLoading ? \"Loadingâ€¦\" : \"Click to load\"}\n    </Button>\n  );\n}\n\nexport default function SearchBar(props) {\n  const [value, setValue] = useState();\n\n  const handleChange = (e) => {\n    /*\n    if (e) setValue(e.target.value);\n    */\n  };\n\n  return (\n    <Form>\n      <Row>\n        <Col sm={10}>\n          <Form.Control\n            type={\"text\"}\n            placeholder={\"search\"}\n            value={value}\n            onChange={handleChange}\n          />\n        </Col>\n        <Col sm={2} className={\"searchButtonCol\"}>\n          <LoadingButton\n            onSearchSubmitted={props.onSearchSubmitted}\n            value={value}\n          />\n        </Col>\n      </Row>\n    </Form>\n  );\n}\n","import React from \"react\";\n\nexport default function SearchResults(props) {\n  return (\n    <>\n      <p>Search Results</p>\n      <ul>\n        {!props.movieError\n          ? props.results.map((movie) => (\n              <li>\n                {movie.Title}, {movie.Year}\n              </li>\n            ))\n          : \"Movie Not Found\"}\n      </ul>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default class NominationsList extends React.Component {\n    render(){\n        return(\n            <>\n            <p>List of Nominations</p>\n           <ul>\n               <li>Result 1</li>\n               <li>Result 2</li>\n               <li>Result 3</li>\n           </ul>\n           </>\n        )\n    }\n}","export default class Omdb {\n  constructor(key) {\n    this.key = key;\n  }\n  search(searchText) {\n    const promise = fetch(\n      \"http://www.omdbapi.com/?apikey=\" +\n        this.key +\n        \"&&s=\" +\n        searchText +\n        \"&&type=movie\"\n    );\n    return promise;\n  }\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Row, Col, Card, Container } from \"react-bootstrap\";\nimport SearchBar from \"./Components/SearchBar\";\nimport SearchResults from \"./Components/SearchResults\";\nimport NominationsList from \"./Components/NominationsList\";\nimport key from \"./apikey.json\"; //needs to be generated by distributor at omdbapi.com\nimport OMDB from \"./Func/OMDB\";\n// state should be saved here\nfunction App() {\n  const database = new OMDB(key.key);\n  const [state, setState] = useState({\n    movieSearch: \"Movie Title\",\n    movieSearchResults: [\n      {\n        Title: \"Shrek\",\n        Year: \"2001\",\n        imdbID: \"tt0126029\",\n        Type: \"movie\",\n        Poster:\n          \"https://m.media-amazon.com/images/M/MV5BOGZhM2FhNTItODAzNi00YjA0LWEyN2UtNjJlYWQzYzU1MDg5L2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\",\n      },\n    ],\n    movieNominees: [],\n    movieNotFoundError: false,\n  });\n  //receives search results as list of movie objects\n  function onSearchSubmitted(movieSearch) {\n    const searchPromise = database.search(movieSearch);\n    searchPromise.then((searchObject) => {\n      let errorResult = {\n        Search: [\n          {\n            Title: \"Movie Not Found\",\n            Year: \"0\",\n            imdbID: \"tt0126029\",\n            Type: \"movie\",\n          },\n        ],\n      };\n\n      let data = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          let didSucceed = true; // adjust for testing\n          didSucceed ? resolve(errorResult) : reject(\"Error\");\n        }, 1);\n      });\n\n      if (searchObject.status === 200) {\n        data = searchObject.json();\n      }\n      data.then((actualStuff) => {\n        let newState = { ...state };\n        if (actualStuff.Response === \"True\") {\n          newState.movieSearchResults = actualStuff.Search;\n          setState(newState);\n        } else {\n          newState.movieNotFound = true;\n          setState(newState);\n        }\n      });\n    });\n    return searchPromise;\n  }\n  // Movie Search is what's in the textbox, MovieSearchResults is a list of movie objects that are the results,\n  //Movie nominees are the nominees\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <h2 className=\"title\"> The Shopify Movers App</h2>\n        </Row>\n        <div className=\"Content\">\n          <Row className=\"pageRow\">\n            <Col align={\"center\"}>\n              <Card className=\"searchCard\">\n                <Card.Body>\n                  <Card.Title>Movie Title</Card.Title>\n                  <SearchBar onSearchSubmitted={onSearchSubmitted} />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row className=\"pageRow\">\n            <Col>\n              <Card className=\"infoCard\">\n                <Card.Body>\n                  <Card.Title>Results</Card.Title>\n                  <SearchResults\n                    results={state.movieSearchResults}\n                    movieError={state.movieError}\n                  />\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card className=\"infoCard\">\n                <Card.Body>\n                  <Card.Title>Nominations</Card.Title>\n                  <NominationsList />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </Container>\n    </div>\n  );\n} //onSearchReceived might be anti-pattern for react\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}