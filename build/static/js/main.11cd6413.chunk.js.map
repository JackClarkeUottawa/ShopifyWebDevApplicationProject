{"version":3,"sources":["Components/SearchBar.js","Components/SearchResults.js","Components/NominationsList.js","Func/OMDB.js","App.js","serviceWorker.js","index.js"],"names":["LoadingButton","props","isLoading","setLoading","useEffect","onSearchSubmitted","value","then","Button","variant","disabled","onClick","SearchBar","useState","loading","state","setState","inLoading","Form","onSubmit","e","preventDefault","Row","Col","sm","Control","type","placeholder","onChange","inValue","key","target","className","SearchResults","isDisabled","movie","item","movieNominees","Title","Year","length","console","log","movieError","results","map","size","addToNominationsList","NominationsList","nominations","index","removeFromNominationsList","Omdb","this","searchText","fetch","App","database","OMDB","movieSearch","movieSearchResults","imdbID","Type","Poster","movieNotFoundError","movieObject","nState","push","Container","Alert","show","align","Card","Body","searchPromise","search","searchObject","errorResult","Search","data","Promise","resolve","reject","setTimeout","status","json","actualStuff","newState","Response","movieNotFound","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.11cd6413.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction LoadingButton(props) {\n  let isLoading = props.isLoading;\n  let setLoading = props.setLoading;\n\n  useEffect(() => {\n    if (isLoading) {\n      props.onSearchSubmitted(props.value).then(() => {\n        setLoading(false);\n      });\n    }\n  }, [isLoading,props,setLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return (\n    <Button\n      variant=\"primary\"\n      disabled={isLoading}\n      onClick={!isLoading ? handleClick : null}\n    >\n      {isLoading ? \"Loadingâ€¦\" : \"Click to load\"}\n    </Button>\n  );\n}\n\nexport default function SearchBar(props) {\n  const [state, setState] = useState({\n    value: \"\",\n    loading: false,\n  });\n  let value = state.value;\n  let loading = state.loading;\n  function setValue(inValue) {\n    value = inValue;\n    setState({\n      value: inValue,\n      loading: state.loading,\n    });\n  }\n\n  function setLoading(inLoading) {\n    loading = inLoading;\n    setState({\n      value: state.value,\n      loading: inLoading,\n    });\n  }\n\n  const handleChange = (e) => {\n    if (e && e.key !== \"Enter\") setValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    setLoading(true);\n    e.preventDefault();\n    props.onSearchSubmitted(value).then(() => {\n      setLoading(false);\n    });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Row>\n        <Col sm={10}>\n          <Form.Control\n            type={\"text\"}\n            placeholder={\"search\"}\n            value={value}\n            onChange={handleChange}\n          />\n        </Col>\n        <Col sm={2} className={\"searchButtonCol\"}>\n          <LoadingButton\n            onSearchSubmitted={props.onSearchSubmitted}\n            value={value}\n            type={\"submit\"}\n            isLoading={loading}\n            setLoading={setLoading}\n          />\n        </Col>\n      </Row>\n    </Form>\n  );\n}\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default function SearchResults(props) {\n  console.log(props.movieError);\n  function isDisabled(movie) {\n    // theres probably a better way to do this, but I'm low on time\n    for (let item in props.movieNominees) {\n      if (\n        props.movieNominees[item].Title === movie.Title &&\n        props.movieNominees[item].Year === movie.Year\n      ) {\n        return true;\n      } else if (props.movieNominees.length >= 5) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  return (\n    <>\n      <p>Search Results</p>\n      <ul>\n        {!props.movieError ? (\n          props.results.map((movie) => (\n            <li>\n              {movie.Title}, {movie.Year}{\" \"}\n              <Button\n                type={\"button\"}\n                size={\"sm\"}\n                onClick={() => {\n                  props.addToNominationsList(movie);\n                }}\n                disabled={isDisabled(movie)}\n              >\n                Nominate\n              </Button>\n            </li>\n          ))\n        ) : (\n          <p>movie not found</p>\n        )}\n      </ul>\n    </>\n  );\n}\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default function NominationsList(props) {\n  return (\n    <>\n      <p>Search Results</p>\n      <ul>\n        {props.nominations.map((movie, index) => (\n          <li>\n            {movie.Title}, {movie.Year}{\" \"}\n            <Button\n              size={\"sm\"}\n              onClick={() => {\n                props.removeFromNominationsList(index);\n              }}\n              variant={\"danger\"}\n            >\n              remove\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n","export default class Omdb {\n  constructor(key) {\n    this.key = key;\n  }\n  search(searchText) {\n    const promise = fetch(\n      \"http://www.omdbapi.com/?apikey=\" +\n        this.key +\n        \"&&s=\" +\n        searchText +\n        \"&&type=movie\"\n    );\n    return promise;\n  }\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Row, Col, Card, Container, Alert } from \"react-bootstrap\";\nimport SearchBar from \"./Components/SearchBar\";\nimport SearchResults from \"./Components/SearchResults\";\nimport NominationsList from \"./Components/NominationsList\";\nimport key from \"./apikey.json\"; //needs to be generated by distributor at omdbapi.com\nimport OMDB from \"./Func/OMDB\";\n\n// state should be saved here\n\nfunction App() {\n  const database = new OMDB(key.key);\n  const [state, setState] = useState({\n    movieSearch: \"Movie Title\",\n    movieSearchResults: [\n      {\n        Title: \"Shrek\",\n        Year: \"2001\",\n        imdbID: \"tt0126029\",\n        Type: \"movie\",\n        Poster:\n          \"https://m.media-amazon.com/images/M/MV5BOGZhM2FhNTItODAzNi00YjA0LWEyN2UtNjJlYWQzYzU1MDg5L2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\",\n      },\n    ],\n    movieNominees: [],\n    movieNotFoundError: false,\n  });\n  //receives search results as list of movie objects\n  function onSearchSubmitted(movieSearch) {\n    const searchPromise = database.search(movieSearch);\n\n    searchPromise.then((searchObject) => {\n      let errorResult = {\n        Search: [\n          {\n            Title: \"Movie Not Found\",\n            Year: \"0\",\n            imdbID: \"tt0126029\",\n            Type: \"movie\",\n          },\n        ],\n      };\n\n      let data = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          let didSucceed = true; // adjust for testing\n          didSucceed ? resolve(errorResult) : reject(\"Error\");\n        }, 1);\n      });\n\n      if (searchObject.status === 200) {\n        data = searchObject.json();\n      }\n\n      data.then((actualStuff) => {\n        let newState = { ...state };\n\n        if (actualStuff.Response === \"True\") {\n          newState.movieSearchResults = actualStuff.Search;\n          newState.movieNotFoundError = false;\n          setState(newState);\n        } else {\n          //console.log(actualStuff.Response);\n          newState.movieNotFound = true;\n          setState(newState);\n        }\n      });\n    });\n\n    return searchPromise;\n  }\n  // Add and remove from nominationslist\n  function addToNominationsList(movieObject) {\n    let nState = { ...state };\n    nState.movieNominees.push(movieObject);\n    setState(nState);\n  }\n\n  function removeFromNominationsList(index) {\n    let nState = { ...state };\n\n    if (index > -1) {\n      nState.movieNominees.splice(index, 1);\n    }\n\n    setState(nState);\n  }\n\n  // Movie Search is what's in the textbox, MovieSearchResults is a list of movie objects that are the results,\n  //Movie nominees are the nominees\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <h2 className=\"title\"> The Shopify Movers App</h2>\n        </Row>\n        <div className=\"Content\">\n          <Alert variant={\"success\"} show={state.movieNominees.length >= 5}>\n            {\" \"}\n            You've reached 5 nominations! Good Job!\n          </Alert>\n          <Row className=\"pageRow\">\n            <Col align={\"center\"}>\n              <Card className=\"searchCard\">\n                <Card.Body>\n                  <Card.Title>Movie Title</Card.Title>\n                  <SearchBar onSearchSubmitted={onSearchSubmitted} />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row className=\"pageRow\">\n            <Col>\n              <Card className=\"infoCard\">\n                <Card.Body>\n                  <Card.Title>Results</Card.Title>\n                  <SearchResults\n                    results={state.movieSearchResults}\n                    movieError={state.movieNotFoundError}\n                    addToNominationsList={addToNominationsList}\n                    movieNominees={state.movieNominees}\n                  />\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card className=\"infoCard\">\n                <Card.Body>\n                  <Card.Title>Nominations</Card.Title>\n                  <NominationsList\n                    nominations={state.movieNominees}\n                    addToNominationsList={addToNominationsList}\n                    removeFromNominationsList={removeFromNominationsList}\n                  />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </Container>\n    </div>\n  );\n} //onSearchReceived might be anti-pattern for react\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}