{"ast":null,"code":"import _objectSpread from\"/home/jack/Documents/HobbyStuff/ShopifyWebDevApplication/ShopifyWebDevApplicationProject/myapp/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/jack/Documents/HobbyStuff/ShopifyWebDevApplication/ShopifyWebDevApplicationProject/myapp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import\"./App.css\";import\"bootstrap/dist/css/bootstrap.css\";import{Row,Col,Card,Container}from\"react-bootstrap\";import SearchBar from\"./Components/SearchBar\";import SearchResults from\"./Components/SearchResults\";import NominationsList from\"./Components/NominationsList\";import key from\"./apikey.json\";//needs to be generated by distributor at omdbapi.com\nimport OMDB from\"./Func/OMDB\";// state should be saved here\nfunction App(){var database=new OMDB(key.key);var _useState=useState({movieSearch:\"Movie Title\",movieSearchResults:[{Title:\"Shrek\",Year:\"2001\",imdbID:\"tt0126029\",Type:\"movie\",Poster:\"https://m.media-amazon.com/images/M/MV5BOGZhM2FhNTItODAzNi00YjA0LWEyN2UtNjJlYWQzYzU1MDg5L2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\"}],movieNominees:[],movieNotFoundError:false}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];//receives search results as list of movie objects\nfunction onSearchSubmitted(movieSearch){var searchPromise=database.search(movieSearch);searchPromise.then(function(searchObject){var errorResult={Search:[{Title:\"Movie Not Found\",Year:\"0\",imdbID:\"tt0126029\",Type:\"movie\"}]};var data=new Promise(function(resolve,reject){setTimeout(function(){var didSucceed=true;// adjust for testing\ndidSucceed?resolve(errorResult):reject(\"Error\");},1);});if(searchObject.status===200){data=searchObject.json();}data.then(function(actualStuff){var newState=_objectSpread({},state);if(actualStuff.Response===\"True\"){newState.movieSearchResults=actualStuff.Search;setState(newState);}else{newState.movieNotFound=true;setState(newState);}});});return searchPromise;}// Movie Search is what's in the textbox, MovieSearchResults is a list of movie objects that are the results,\n//Movie nominees are the nominees\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(\"h2\",{className:\"title\"},\" The Shopify Movers App\")),/*#__PURE__*/React.createElement(\"div\",{className:\"Content\"},/*#__PURE__*/React.createElement(Row,{className:\"pageRow\"},/*#__PURE__*/React.createElement(Col,{align:\"center\"},/*#__PURE__*/React.createElement(Card,{className:\"searchCard\"},/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,\"Movie Title\"),/*#__PURE__*/React.createElement(SearchBar,{onSearchSubmitted:onSearchSubmitted}))))),/*#__PURE__*/React.createElement(Row,{className:\"pageRow\"},/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Card,{className:\"infoCard\"},/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,\"Results\"),/*#__PURE__*/React.createElement(SearchResults,{results:state.movieSearchResults,movieError:state.movieError})))),/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Card,{className:\"infoCard\"},/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Card.Title,null,\"Nominations\"),/*#__PURE__*/React.createElement(NominationsList,null))))))));}//onSearchReceived might be anti-pattern for react\nexport default App;","map":{"version":3,"sources":["/home/jack/Documents/HobbyStuff/ShopifyWebDevApplication/ShopifyWebDevApplicationProject/myapp/src/App.js"],"names":["React","useState","Row","Col","Card","Container","SearchBar","SearchResults","NominationsList","key","OMDB","App","database","movieSearch","movieSearchResults","Title","Year","imdbID","Type","Poster","movieNominees","movieNotFoundError","state","setState","onSearchSubmitted","searchPromise","search","then","searchObject","errorResult","Search","data","Promise","resolve","reject","setTimeout","didSucceed","status","json","actualStuff","newState","Response","movieNotFound","movieError"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Row, Col, Card, Container } from \"react-bootstrap\";\nimport SearchBar from \"./Components/SearchBar\";\nimport SearchResults from \"./Components/SearchResults\";\nimport NominationsList from \"./Components/NominationsList\";\nimport key from \"./apikey.json\"; //needs to be generated by distributor at omdbapi.com\nimport OMDB from \"./Func/OMDB\";\n// state should be saved here\nfunction App() {\n  const database = new OMDB(key.key);\n  const [state, setState] = useState({\n    movieSearch: \"Movie Title\",\n    movieSearchResults: [\n      {\n        Title: \"Shrek\",\n        Year: \"2001\",\n        imdbID: \"tt0126029\",\n        Type: \"movie\",\n        Poster:\n          \"https://m.media-amazon.com/images/M/MV5BOGZhM2FhNTItODAzNi00YjA0LWEyN2UtNjJlYWQzYzU1MDg5L2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\",\n      },\n    ],\n    movieNominees: [],\n    movieNotFoundError: false,\n  });\n  //receives search results as list of movie objects\n  function onSearchSubmitted(movieSearch) {\n    const searchPromise = database.search(movieSearch);\n    searchPromise.then((searchObject) => {\n      let errorResult = {\n        Search: [\n          {\n            Title: \"Movie Not Found\",\n            Year: \"0\",\n            imdbID: \"tt0126029\",\n            Type: \"movie\",\n          },\n        ],\n      };\n\n      let data = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          let didSucceed = true; // adjust for testing\n          didSucceed ? resolve(errorResult) : reject(\"Error\");\n        }, 1);\n      });\n\n      if (searchObject.status === 200) {\n        data = searchObject.json();\n      }\n      data.then((actualStuff) => {\n        let newState = { ...state };\n        if (actualStuff.Response === \"True\") {\n          newState.movieSearchResults = actualStuff.Search;\n          setState(newState);\n        } else {\n          newState.movieNotFound = true;\n          setState(newState);\n        }\n      });\n    });\n    return searchPromise;\n  }\n  // Movie Search is what's in the textbox, MovieSearchResults is a list of movie objects that are the results,\n  //Movie nominees are the nominees\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <h2 className=\"title\"> The Shopify Movers App</h2>\n        </Row>\n        <div className=\"Content\">\n          <Row className=\"pageRow\">\n            <Col align={\"center\"}>\n              <Card className=\"searchCard\">\n                <Card.Body>\n                  <Card.Title>Movie Title</Card.Title>\n                  <SearchBar onSearchSubmitted={onSearchSubmitted} />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row className=\"pageRow\">\n            <Col>\n              <Card className=\"infoCard\">\n                <Card.Body>\n                  <Card.Title>Results</Card.Title>\n                  <SearchResults\n                    results={state.movieSearchResults}\n                    movieError={state.movieError}\n                  />\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col>\n              <Card className=\"infoCard\">\n                <Card.Body>\n                  <Card.Title>Nominations</Card.Title>\n                  <NominationsList />\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </Container>\n    </div>\n  );\n} //onSearchReceived might be anti-pattern for react\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}